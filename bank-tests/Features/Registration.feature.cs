// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BankTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Registration")]
    public partial class RegistrationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Registration.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Registration", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registration check")]
        [NUnit.Framework.CategoryAttribute("registrationPositive")]
        public virtual void RegistrationCheck()
        {
            string[] tagsOfScenario = new string[] {
                    "registrationPositive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Registration check", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I have navigated to bank\'s login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And("I click register link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "input"});
                table1.AddRow(new string[] {
                            "fname",
                            "paul"});
                table1.AddRow(new string[] {
                            "lname",
                            "mikj"});
                table1.AddRow(new string[] {
                            "address",
                            "somestreet"});
                table1.AddRow(new string[] {
                            "city",
                            "somecity"});
                table1.AddRow(new string[] {
                            "state",
                            "somestate"});
                table1.AddRow(new string[] {
                            "zip",
                            "somezip"});
                table1.AddRow(new string[] {
                            "phone",
                            "651641615"});
                table1.AddRow(new string[] {
                            "ssn",
                            "615651"});
                table1.AddRow(new string[] {
                            "username",
                            "reg_pos_2"});
                table1.AddRow(new string[] {
                            "password",
                            "123123"});
                table1.AddRow(new string[] {
                            "confirm",
                            "123123"});
#line 8
 testRunner.When("I enter the following information", ((string)(null)), table1, "When ");
#line hidden
#line 21
 testRunner.And("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("I should see a registration confirmation message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative reg check - empty address")]
        [NUnit.Framework.CategoryAttribute("registrationEmptyAddress")]
        public virtual void NegativeRegCheck_EmptyAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "registrationEmptyAddress"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative reg check - empty address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given("I have navigated to bank\'s login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.And("I click register link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "input"});
                table2.AddRow(new string[] {
                            "fname",
                            "paul"});
                table2.AddRow(new string[] {
                            "lname",
                            "mikj"});
                table2.AddRow(new string[] {
                            "address",
                            ""});
                table2.AddRow(new string[] {
                            "city",
                            "somecity"});
                table2.AddRow(new string[] {
                            "state",
                            "somestate"});
                table2.AddRow(new string[] {
                            "zip",
                            "somezip"});
                table2.AddRow(new string[] {
                            "phone",
                            "651641615"});
                table2.AddRow(new string[] {
                            "ssn",
                            "615651"});
                table2.AddRow(new string[] {
                            "username",
                            "reg_neg_address_2"});
                table2.AddRow(new string[] {
                            "password",
                            "123123"});
                table2.AddRow(new string[] {
                            "confirm",
                            "123123"});
#line 29
 testRunner.When("I enter the following information", ((string)(null)), table2, "When ");
#line hidden
#line 42
 testRunner.And("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.Then("I should see an addressErr error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative reg check - empty last name")]
        [NUnit.Framework.CategoryAttribute("registrationEmptyLastName")]
        public virtual void NegativeRegCheck_EmptyLastName()
        {
            string[] tagsOfScenario = new string[] {
                    "registrationEmptyLastName"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative reg check - empty last name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
 testRunner.Given("I have navigated to bank\'s login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
 testRunner.And("I click register link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "input"});
                table3.AddRow(new string[] {
                            "fname",
                            "paul"});
                table3.AddRow(new string[] {
                            "lname",
                            ""});
                table3.AddRow(new string[] {
                            "address",
                            "someaddress"});
                table3.AddRow(new string[] {
                            "city",
                            "somecity"});
                table3.AddRow(new string[] {
                            "state",
                            "somestate"});
                table3.AddRow(new string[] {
                            "zip",
                            "somezip"});
                table3.AddRow(new string[] {
                            "phone",
                            "651641615"});
                table3.AddRow(new string[] {
                            "ssn",
                            "615651"});
                table3.AddRow(new string[] {
                            "username",
                            "reg_neg_lname_2"});
                table3.AddRow(new string[] {
                            "password",
                            "123123"});
                table3.AddRow(new string[] {
                            "confirm",
                            "123123"});
#line 50
 testRunner.When("I enter the following information", ((string)(null)), table3, "When ");
#line hidden
#line 63
 testRunner.And("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.Then("I should see an lnameErr error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative reg check - empty city")]
        [NUnit.Framework.CategoryAttribute("registrationEmptyCity")]
        public virtual void NegativeRegCheck_EmptyCity()
        {
            string[] tagsOfScenario = new string[] {
                    "registrationEmptyCity"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative reg check - empty city", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
 testRunner.Given("I have navigated to bank\'s login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.And("I click register link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "input"});
                table4.AddRow(new string[] {
                            "fname",
                            "paul"});
                table4.AddRow(new string[] {
                            "lname",
                            "mikj"});
                table4.AddRow(new string[] {
                            "address",
                            "someaddress"});
                table4.AddRow(new string[] {
                            "city",
                            ""});
                table4.AddRow(new string[] {
                            "state",
                            "somestate"});
                table4.AddRow(new string[] {
                            "zip",
                            "somezip"});
                table4.AddRow(new string[] {
                            "phone",
                            "651641615"});
                table4.AddRow(new string[] {
                            "ssn",
                            "615651"});
                table4.AddRow(new string[] {
                            "username",
                            "reg_neg_city_2"});
                table4.AddRow(new string[] {
                            "password",
                            "123123"});
                table4.AddRow(new string[] {
                            "confirm",
                            "123123"});
#line 71
 testRunner.When("I enter the following information", ((string)(null)), table4, "When ");
#line hidden
#line 84
 testRunner.And("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.Then("I should see an cityErr error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
